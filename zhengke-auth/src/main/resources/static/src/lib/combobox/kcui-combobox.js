/*! * KcComboBox v1.0.0 (http://xinn.wang) * @chengrui software * Copyright 2015 Chengrui, Inc. */if ("undefined" == typeof jQuery) {	throw new Error("KcComboBox's JavaScript requires jQuery");}+function($) {	'use strict';	var version = $.fn.jquery.split(' ')[0].split('.')	if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1)) {		throw new Error('KcComboBox\'s JavaScript requires jQuery version 1.9.1 or higher')	}} (jQuery);/* * ======================================================================== * KcComboBox http://xinn.wang * ======================================================================== * Copyright 2011-2015 @Chengrui Software, Inc.  * Licensed under Chengrui (http://xinn.wang) * ======================================================================== */+function($) {	'use strict';	var backdrop = '.dropdown-backdrop'	var toggle = '[data-toggle="kc-combo-box"]'	var noCloseMenus = "kc-combo-no-close";		var KcComboBox = function(element, options) {		this.element = $(element);		this.options = options;		$(document)		.on('click.kc.combo.box', clearMenus)		.on('click.kc.combo.box', '.dropdown, .dropup',function(e) {e.stopPropagation()})		.on('keydown.kc.combo.box', toggle, KcComboBox.prototype._keydown)		.on('keydown.kc.combo.box', '.dropdown-menu', KcComboBox.prototype._keydown);	};		KcComboBox.VERSION = '1.1';		// 初始化画面元素	KcComboBox.prototype._create = function() {		var rootWrap = $("<div>").addClass('input-group').addClass('dropdown').addClass("kcui-combobox").addClass(this.options.cls || "");		this.rootWrap = rootWrap;		this.uiContent = $("<div>")/*.css({width: "100%"})*/.addClass("dropdown-menu").addClass('panel').addClass('panel-default').addClass("kcui-combo-dropdown").appendTo("body");		if (this.options.showMultiBox) this.uiContent.on("click.kc.combo.box", stopCloseMenus)		this.button = $("<a>", { href: "javascript:;", "data-toggle": "kc-combo-box" }).append("<span class='caret'></span>").append("<span class='sr-only'>Loading...</span>").addClass("input-group-addon btn btn-default");		this.elementKey = $("<input>", { type: "hidden", name: this.element.attr("data-name")}).val(this.element.attr("data-value") || "")		this.element.addClass("form-control").wrap(this.rootWrap);		this.element.after(this.button);		/*this.element.after(this.uiContent);*/		this.element.after(this.elementKey);		this.uiMask = $("<span>").addClass("kcui-combo-mask").addClass("kcui-icon-loading-1");		this.element.after(this.uiMask);		this.element.attr({autocomplete: "off"});		if (this.options.showHeader === true) {			this._showHeader();					}		this.uiBody = $("<ul>").addClass('panel-body').css({ 'max-height': this.options.maxHeight}).appendTo(this.uiContent);		if (this.options.pageConfig.isShow === true) {			this._showFooter();			} 		this.uiErrorInfo = $("<div class='disabled kcui-combo-footer' style='background: white;'><a style='padding: 5px 10px; display: block;'>暂无数据</a></div>").on("click.kc.combo.box", clearMenus).appendTo(this.uiContent);		this._bindEvents();		$(window).on("resize.kccombobox, scroll.kccombobox", this._winResize());	};	// 绑定事件	KcComboBox.prototype._bindEvents = function() {		var $this = this;		this.button.on('click.kc.combo.box', $this._toggle);		this.button.data("kc.combo.box.root", $this);		var timeoutId;		this.element.on("keyup.kc.combo.box", function(e) {			if ($(this).data("kc.combo.input.value") == $(this).val()) return;			$(this).data("kc.combo.input.value", $(this).val());			clearTimeout(timeoutId);			if ($this.options.minLength <= $this.element.val().length) {				timeoutId = window.setTimeout(function() {					$this.isKeyWord = true;					$this.button.trigger("click.kc.combo.box", true);				},				$this.options.delay > 0 ? $this.options.delay : 100);			}		});	};	// 检查是否是数据行 如果是数据行进行数据处理	KcComboBox.prototype._checkClickItem = function(event) {		var root = event.data.root;		var rowData = $(this).data("kc.combo.box.row.data");		if (root.options.showMultiBox) {			root._checkBoxIconState($(".kcui-combo-icon", $(this)));			root.options.onChange(root._getSelectedItem());		} else {			//当return false 时，可以自行对KcComboBox文本进行设置值或者设置值的格式			if ( root.options.onChange(rowData) !== false ) {				root.elementKey.val(rowData[root.options.fields.key]);				root.element.val(rowData[root.options.fields.value]);			}			clearMenus();		}	}	KcComboBox.prototype._toggleMask = function(){		var uiMask = this.uiMask;		uiMask.toggleClass("show");		if (uiMask.is(":visible")) {			uiMask.count = 0; 			uiMask.maskInterval = setInterval(function(){				if (uiMask.count == 0) {					uiMask.removeClass("kcui-icon-loading-" + 8);				} else {					uiMask.removeClass("kcui-icon-loading-" + uiMask.count);				}				uiMask.addClass("kcui-icon-loading-" + ++uiMask.count);				if (uiMask.count >= 8) {					uiMask.count = 0;									}			}, 80);		} else {			clearInterval(uiMask.maskInterval)		}	}	//显示Header	KcComboBox.prototype._showHeader = function(){		var $this = this;		var optoins = this.options;		this.uiHeader = $("<div>").addClass('panel-heading');		if (optoins.showMultiBox) {			this.uiHeaderCheckBox = $("<span>").on("click.kc.combo.box", {root: this}, this._headCheckBox).addClass('kcui-combo-icon').addClass(this._constants.UNCHECKED).appendTo(this.uiHeader);					} else {			this.uiHeader.addClass("kcui-combo-heading");			}		this.uiTitle = $("<span>").html(this.options.title).appendTo(this.uiHeader);		this.uiCheckBoxOpt = $("<span>").addClass("pull-right").addClass('kcui-combo-check-box-ok').appendTo(this.uiHeader);		/*$("<span>").addClass('kcui-icon-empty').appendTo(this.uiCheckBoxOpt).on("click.kc.combo.box", function(){			$(".kcui-combo-icon").removeClass($this._constants.CHECKED).removeClass($this._constants.INDETERMINATE);		});*/		/*$("<span style='cursor: default;'>&nbsp;&nbsp;</span>").appendTo(this.uiCheckBoxOpt);*/		if (optoins.showMultiBox) {			$("<span>").addClass('kcui-icon-ok kcui-icon-confirm').appendTo(this.uiCheckBoxOpt).on("click", function(event){				$this.options.onCompleteSelect($this._getSelectedItem(), $this);			});		}		this.uiHeader.on("click.kc.combo.box", stopCloseMenus).appendTo(this.uiContent);	}		KcComboBox.prototype._headCheckBox = function(event){		var root = event.data.root;		if ($(this).hasClass(root._constants.INDETERMINATE) || $(this).hasClass(root._constants.UNCHECKED)) {			$(this).removeClass(root._constants.UNCHECKED).removeClass(root._constants.INDETERMINATE).addClass(root._constants.CHECKED);		} else {			$(this).removeClass(root._constants.INDETERMINATE).removeClass(root._constants.CHECKED).addClass(root._constants.UNCHECKED);		}		root._checkBoxIconState($(this), true);	}	//显示分页	KcComboBox.prototype._showFooter = function(){		this.uiFooter = $("<div>").addClass("panel-footer").addClass("kcui-combo-footer");		var footTable = $("<table>").addClass("kcui-combo-footer-table").css({'min-width': this.options.minWidth}).appendTo(this.uiFooter);		var footRow = $("<tr>").appendTo(footTable);		var btnUiIconFirst = $("<span>", {"data-action": "first"}).addClass("kcui-combo-footer-span kcui-icon-first").appendTo($("<td>").addClass("kcui-combo-footer-td").appendTo(footRow));		var btnUiIconPrev = $("<span>", {"data-action": "prev"}).addClass("kcui-combo-footer-span kcui-icon-prev").appendTo($("<td>").addClass("kcui-combo-footer-td").appendTo(footRow));		this.pageNumberInput = $("<input>", {type: "text", "data-action": "entry"}).addClass("kcui-combo-footer-input kcui-entry input-sm").on("keyup", this._pagerEvents()).val(this.options.pageConfig.pageNumber);		var btnUiIconNumber = $("<span>").addClass("kcui-combo-footer-span").append("页 ").append(this.pageNumberInput).appendTo($("<td>").appendTo(footRow));		this.pageSizeSpan = $("<span>0</span>");		this.totalInfo = $("<td>",{ "data-toggle": "tooltip", "data-placement": "top" }).addClass("kcui-combo-footer-td").append("<span>共</span>").append(this.pageSizeSpan).appendTo(footRow);		var btnUiIconNext = $("<span>", {"data-action": "next"}).addClass("kcui-combo-footer-span kcui-icon-next").appendTo($("<td>").addClass("kcui-combo-footer-td").appendTo(footRow));		var btnUiIconLast = $("<span>", {"data-action": "last"}).addClass("kcui-combo-footer-span kcui-icon-last").appendTo($("<td>").addClass("kcui-combo-footer-td").appendTo(footRow));		$("<td>").append("&nbsp;").addClass("kcui-combo-footer-td").appendTo(footRow);		var btnUiIconRefresh = $("<span>", {"data-action": "refresh"}).addClass("kcui-combo-footer-span kcui-icon-refresh").appendTo($("<td>").addClass("kcui-combo-footer-td").appendTo(footRow));		this.uiFooter.on("click.kc.combo.box",".kcui-icon-first, .kcui-icon-prev, .kcui-icon-next, .kcui-icon-last, .kcui-icon-refresh", this._pagerEvents());		this.uiFooter.on("click.kc.combo.box", stopCloseMenus).appendTo(this.uiContent);		this.uiContent.addClass("kcui-combo-min-width");			}	//分页事件处理	KcComboBox.prototype._pagerEvents = function(){		var $this = this;		return function(e){			if ($this.options.pageConfig.onChangePageBefore($this._getSelectedItem() ,$this.pageNumber, $this.pageSize)=== false) return;			switch ($(this).attr("data-action")) {				case 'first': {					if ( $this.pageNumber > 1 ) $this._remoteData($this.element.val(), 1);					break;				}				case 'prev': {					if ( $this.pageNumber > 1 ) $this._remoteData($this.element.val(), --$this.pageNumber);					break;				}				case 'entry': {					var value = parseInt($(this).val() || 1);					if (e && e.which === 13 && value >= 1 && value<= $this.pageSize) $this._remoteData($this.element.val(), value);					break;				}				case 'next': {					if ($this.pageNumber < $this.pageSize) $this._remoteData($this.element.val(), ++$this.pageNumber);	 					break;				}				case 'last': {					if ($this.pageNumber < $this.pageSize) $this._remoteData($this.element.val(), $this.pageSize);					break;				}				case 'refresh': {										if (!isNaN($this.pageNumberInput.val())) $this._remoteData($this.element.val(), $this.pageNumberInput.val());					break;				}				default: break;			}		}	}	//私有方法	KcComboBox.prototype._setComboVal = function(array){		if ( array.length == 2 ) {			this.element.val(array[0]);						this.elementKey.val(array[1]);		}	}	//设置值	KcComboBox.prototype.setComboVal = function(value, key){		this._setComboVal([value, key]);	}	KcComboBox.prototype.closeComboBox = function(){		clearMenus();	}	KcComboBox.prototype.clearComboBox = function(){		this.element.val(null);					this.elementKey.val(null);	}	KcComboBox.prototype.getSelectedItem = function(){		var data = {};		data[this.options.fields.value] = this.element.val();		data[this.options.fields.key] = this.elementKey.val();		return data;	},	KcComboBox.prototype.setConditions = function(data){		this.conditions = data || {};	}	KcComboBox.prototype.getConditions = function(data){		return this.conditions || {};	}	KcComboBox.prototype.clearConditions = function(data){		this.conditions = {};	}	KcComboBox.prototype.destory = function(){		this.rootWrap.remove();		this.uiContent.remove();	}	//获取数据	KcComboBox.prototype._getSelectedItem = function(){		return $.map($(".kcui-icon-checkbox-checked", this.uiBody), function(item){			return $(item).closest("li").data("kc.combo.box.row.data");		});	}		KcComboBox.prototype._appendChild = function(data) {		var options = this.options;		var item = $("<a>", { href: "javascript:;" }).addClass("kcui-combo-item").addClass(this.options.showMultiBox ? "check-box": "");		var child = $("<li>")/*.addClass("table-bordered")*/.append(item).on("click.kc.combo.box", { root: this }, this._checkClickItem).data("kc.combo.box.row.data", data).appendTo(this.uiBody);		item.checked = false;		var formatValue = options.onFormatter(data[options.fields.value], data, item);		if (this.options.showMultiBox) {			var icon = $("<span>").addClass("kcui-combo-icon").addClass(this._constants.UNCHECKED)			item.append(icon);			if (item.checked) {				this._checkBoxIconState(icon);							}		}		if ( formatValue ) {			item.append(formatValue);			this.useValues.push(formatValue);		} else {			item.append(data[options.fields.value])				this.useValues.push(data[options.fields.value]);		}	}		KcComboBox.prototype._constants = {		CHECKED: 'kcui-icon-checkbox-checked',		INDETERMINATE: 'kcui-icon-checkbox-indeterminate',		UNCHECKED: 'kcui-icon-checkbox-unchecked',		UISPANICON: 'kcui-combo-icon',		ACTIVE: "active"	};		KcComboBox.prototype._checkBoxIconState = function(item, flag){		if( !item ) {			if (this.options.showHeader && this.options.showMultiBox){				this.uiHeaderCheckBox.removeClass(this._constants.CHECKED).removeClass(this._constants.INDETERMINATE).addClass(this._constants.UNCHECKED);			}			return false;		}		if ( flag ) {			if ( item.hasClass(this._constants.CHECKED) ) {				$(".kcui-combo-icon", this.uiBody).removeClass(this._constants.UNCHECKED).addClass(this._constants.ACTIVE).addClass(this._constants.CHECKED);			} else {				$(".kcui-combo-icon", this.uiBody).removeClass(this._constants.CHECKED).removeClass(this._constants.ACTIVE).addClass(this._constants.UNCHECKED);			}		} else {			if (item.hasClass(this._constants.ACTIVE)) {				item.removeClass(this._constants.CHECKED).addClass(this._constants.UNCHECKED).removeClass(this._constants.ACTIVE);				} else {				item.removeClass(this._constants.UNCHECKED).addClass(this._constants.CHECKED).addClass(this._constants.ACTIVE);				}			//root.uiHeaderCheckBox			if (this.options.showHeader) {				if ( $("." + this._constants.ACTIVE, this.uiBody).length == 0) {					this.uiHeaderCheckBox.removeClass(this._constants.INDETERMINATE).removeClass(this._constants.CHECKED).addClass(this._constants.UNCHECKED);				} else if ( $("." + this._constants.ACTIVE, this.uiBody).length < $("li", this.uiBody).length) {					this.uiHeaderCheckBox.removeClass(this._constants.CHECKED).removeClass(this._constants.UNCHECKED).addClass(this._constants.INDETERMINATE)				} else {					this.uiHeaderCheckBox.removeClass(this._constants.INDETERMINATE).removeClass(this._constants.UNCHECKED).addClass(this._constants.CHECKED)				}							}		}	}		//分页请求数据	KcComboBox.prototype._remoteData = function(term, pageNumber, handler) {		var $this = this;		var pageConfig = this.options.pageConfig;		var request = {};		if (pageConfig.isShow) {			request.pageNumber = pageNumber;			request.pageSize = pageConfig.pageSize;		}		request[this.options.fields.value || "term"] = term;				this._toggleMask()		this.options.source($.extend(true, {}, request, this.conditions || {}), function(remoteData){			$this._loadData(remoteData);			if (typeof handler === "function") {				handler();			}			$this._toggleMask()		});	}	//分頁配置	KcComboBox.prototype._loadPageConfig = function(data){		this.total = parseInt(data.total || 0);		this.pageNumber = parseInt(data.pageNumber || 1);		if (data.pageSize) {			this.pageSize = Math.ceil(this.total / parseInt(data.pageSize));					}else{			this.pageSize = 0;		}		this.pageSizeSpan.html(this.pageSize);		this.pageNumberInput.val(this.pageNumber);		this.totalInfo.attr({			title:  "总" + this.total + ",每页" + data.pageSize		}).tooltip();	}	//加载数据	KcComboBox.prototype._loadData = function(data) {		var root = this;		if ($.isArray(data)) {			this.dataList = data;		} else if (!$.isEmptyObject(data)){			this.dataList = data.dataList || [];					} else {			this.dataList = [];		}				//第二次加载清空遗留数据		this.uiBody.empty();		this.useValues = [];		if (this.dataList && this.dataList.length > 0) {			this.uiErrorInfo.hide();			if ( this.options.showHeader ) {				this._checkBoxIconState();				this.uiHeader.show();			}			if ( this.options.pageConfig.isShow && !$.isEmptyObject(data)) {				this._loadPageConfig(data);				this.uiFooter.show();			}						$.each(this.dataList || [], function() { root._appendChild(this) })		} else {			if ( this.options.showHeader ) {				this.uiHeader.hide();			}			if ( this.options.pageConfig.isShow ){				this.uiFooter.hide();			}			this.uiErrorInfo.show();		}		if ( this.options.pageConfig.isShow ){			this.options.pageConfig.onChangePageAfter(data);		}	}	//stop close dropdown menus	function stopCloseMenus(event){return false}	function getParent($this) {		var selector = $this.attr('data-target')		if (!selector) {			selector = $this.attr('href')			selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '')		}		var $parent = selector && $(selector)		return $parent && $parent.length ? $parent: $this.parent()	}		function clearMenus(e) {		if (e && e.which === 3) return;		$(backdrop).remove()		$(toggle).each(function() {			var $this = $(this)			var $parent = getParent($this)			var relatedTarget = {				relatedTarget: this			}			if (!$parent.hasClass('open')) return;			var root = $this.data("kc.combo.box.root");			if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return;			if (root.options.onHide(root) === false) return;			$parent.trigger(e = $.Event('hide.kc.combo.box', relatedTarget))			if (e.isDefaultPrevented()) return;			$this.attr('aria-expanded', 'false')			root.options.onHidden(root)			$parent.removeClass('open');			root._toggleContent(false);			$parent.trigger('hidden.kc.combo.box', relatedTarget)			var value = root.element.val();						if (!root.isKeyup && value && root.useValues.indexOf(value) == -1 && !root.options.showMultiBox) {				root.element.val(null);				root.elementKey.val(null);			}		})	}	KcComboBox.prototype._toggle = function(e, isKeyup) {		var $this = $(this)		if ($this.is('.disabled, :disabled')) return;		var $root = $this.data("kc.combo.box.root");		$root.isKeyup = isKeyup;		var $parent = getParent($this)		var isActive = $parent.hasClass('open')		clearMenus();		$root.isKeyup  = false;		if (!isActive || $root.isKeyWord) {			if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {				$(document.createElement('div'))				.addClass('dropdown-backdrop')				.insertAfter($(this))				.on('click', clearMenus)			}			var relatedTarget = {				relatedTarget: this			}			if ( $root.options.onShow($root) === false) return ;			$parent.trigger(e = $.Event('show.kc.combo.box', relatedTarget))			if (e.isDefaultPrevented()) return;			$root.element.trigger('focus');			$this.attr('aria-expanded', 'true')			var pageConfig = $root.options.pageConfig;			$root._remoteData( isKeyup ? $root.element.val() : "", pageConfig.pageNumber, function(){				$parent				.toggleClass('open', true);				$root._toggleContent(true);				$parent.trigger('shown.kc.combo.box', relatedTarget)				$root.options.onShown($root);				$root.isKeyWord = false;			});		}		return false;	}	KcComboBox.prototype._toggleContent = function(isShow){		var element = this.element;		var uiContent = this.uiContent;		uiContent.isShow = isShow;		if (isShow) {			var offset = element.offset();			var height = this.button.css("height");			uiContent.css({left: offset.left, top: offset.top  + parseInt(height.substr(0, height.indexOf("px"))), width: this.element.css("width")});			uiContent.show();		} else {			uiContent.removeAttr("style");			uiContent.hide();		}	}	KcComboBox.prototype._winResize = function(){		var $this = this;		return function(event){			if ($this.uiContent.isShow) {				var offset = $this.element.offset();				var height = $this.button.css("height");				$this.uiContent.css({left: offset.left, top: offset.top  + parseInt(height.substr(0, height.indexOf("px"))), width: $this.element.css("width")});			}		}	}	KcComboBox.prototype._keydown = function(e) {		if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return		var $this = $(this)		e.preventDefault()		e.stopPropagation()		if ($this.is('.disabled, :disabled')) return		var $parent = getParent($this)		var isActive = $parent.hasClass('open')		if (!isActive && e.which != 27 || isActive && e.which == 27) {			if (e.which == 27) $parent.find(toggle).trigger('focus')			return $this.trigger('click')		}		var desc = ' li:not(.disabled):visible'//var desc = ' li:not(.disabled):visible a'		var $items = $parent.find('.dropdown-menu' + desc)		if (!$items.length) return		var index = $items.index(e.target)		if (e.which == 38 && index > 0) index-- // up		if (e.which == 40 && index < $items.length - 1) index++ // down		if (!~index) index = 0		$items.eq(index).trigger('focus')	}		function Plugin(option) {		var $this = $(this);		var data = $this.data('kc.combo.box')		if (!data) {			$this.data('kc.combo.box', (data = new KcComboBox(this, option)));			return $.extend($(this), data);		}		if (typeof option == 'string') data[option].call($this)		return $this;	}	function Plugin(options) {		var $this = $(this)					var data  = $this.data('kcui.kccombobox')		if (!data) {			$this.data('kcui.kccombobox', (data = new KcComboBox(this, $.extend(true, {}, $.fn.kccombo.defaults, options || {}))))			data["_create"].apply(data);		}		if (typeof options == 'string') {			if (typeof data[options] === "function") {				var args = [];				$.each(arguments||[], function(index){ if (index != 0) args.push(this); });				return data[options].apply(data, args);			} else {				$.error("KcComboBox DID NOT '" + options + "' METHOD")			} 		}		return $this;	}	var old = $.fn.kcComboBox	$.fn.kccombo = Plugin;	$.fn.kccombo.Constructor = KcComboBox;	$.fn.kccombo.noConflict = function() {		$.fn.kccombo = old		return this	}	$.fn.kccombo.defaults = {			fields: { 				unique: null,//unique：用于标示当前数据是唯一数据，如果没有配置就以key为唯一标示 ；				key: null, //key：KcComboBox主要是以键值对的形式使用，key为键；				value: null//value：KcComboBox主要是以键值对的形式使用，value为值；			},			title: 'Title',			cls: "",//部分追加样式			maxHeight: 180,			delay: 100,			minLength: 0,			source: $.noop,			onChange: $.noop,			onShown: $.noop,			onShow: $.noop,			onHidden: $.noop,			onHide: $.noop,			onFormatter: $.noop,			onCompleteSelect: $.noop, 			showMultiBox: false,			showHeader: false,			pageConfig: {				isShow: false,				pageNumber: 1,				pageSize: 20,				onChangePageBefore: $.noop,				onChangePageAfter: $.noop			}		};} (window.jQuery);